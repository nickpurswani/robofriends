{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","action.js","constant.js","reportWebVitals.js","reducers.js","serviceWorkerRegistration.js","index.js"],"names":["Card","_ref","name","email","id","React","createElement","className","alt","src","concat","CardList","robots","map","robot","key","SearchBox","searchchange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","Component","constructor","super","this","state","hasError","componentDidCatch","error","info","setState","render","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","text","payload","setSearchField","target","value","onRequestRobots","axios","get","then","data","console","log","catch","loading","setLoading","useState","useEffect","filteredRobots","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","intialSearchState","inititalStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","Logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","createRoot","document","getElementById","StrictMode","Provider","App","URL","process","href","origin","addEventListener","fetch","headers","Service-Worker","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ed23d91a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"tachyons\";\r\n\r\nconst Card = ({name,email,id}) => {\r\n\r\n    return(\r\n        <div className=\" tc bg-light-green dib br4 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200*200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"tachyons\";\r\n\r\nconst CardList = ({robots})=>{\r\n    \r\nreturn(\r\n    <div>\r\n      {\r\n      robots.map((robot)=>{\r\n        return( <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email}></Card>\r\n      );\r\n   }) \r\n      }\r\n    </div>\r\n);\r\n};\r\nexport default CardList;","import React from \"react\";\r\nimport \"tachyons\";\r\n\r\nconst SearchBox=({searchchange})=>{\r\n    return(\r\n        <div>\r\n            <input\r\n            id=\"seachbox\"\r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type=\"search\"\r\n            placeholder='search robots'\r\n            onChange={searchchange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from\"react\";\r\n\r\nconst Scroll=(props)=>{\r\nreturn(\r\n    <div style={{overflow: \"scroll\",border:'5px solid black',height:'800px'}}>\r\n        {props.children}\r\n    </div>\r\n);\r\n\r\n}\r\nexport default Scroll;\r\n","import React,{Component} from \"react\";\r\n\r\nclass ErrorBoundary extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n     componentDidCatch(error,info){\r\n        this.setState({hasError:true});\r\n     } \r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Error occured while fetching robofriends</h1>\r\n        }\r\n        else{\r\n           return this.props.children; \r\n        }\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React, { useEffect,useState } from \"react\";\r\n// import {robots} from\"./robots\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\n\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport {requestRobots, setSearchField} from '../action';\r\nimport {connect} from 'react-redux';\r\nimport \"tachyons\";\r\nconst mapStateToProps=state=>{\r\n    return{\r\n        searchField : state.searchRobots.searchField,\r\n        robots:state.requestRobots.robots,\r\n        isPending:state.requestRobots.isPending,\r\n        error:state.requestRobots.error\r\n    }\r\n}\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    return {\r\n        onSearchChange:(event)=>dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots:()=>{\r\n          return  dispatch(requestRobots())\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n// -----------------------------------------\r\n const App=(props)=>{\r\n    const [loading,setLoading]=useState(true);\r\n    const {searchField,onSearchChange,robots,onRequestRobots}=props;\r\n    useEffect( ()=>{\r\n         onRequestRobots();\r\n         setLoading(false);\r\n    },[onRequestRobots])\r\n        const filteredRobots=robots.filter(robots =>{\r\n            return robots.name.toLowerCase().includes(searchField.toLowerCase());    \r\n            });\r\n            if (loading){\r\n                return <h1>.....Loading</h1>\r\n            }\r\n            else{\r\n    return(\r\n        <div className=\"tc\">\r\n            <h1 className=\"f1\" >RoboFriends</h1>\r\n            <SearchBox searchchange={onSearchChange}/>\r\n            <Scroll>\r\n            <ErrorBoundary>\r\n            <CardList robots={filteredRobots}  />\r\n            </ErrorBoundary>\r\n            </Scroll>\r\n        </div>\r\n    )}}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);//connect is higher order function that return function","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS } from \"./constant\"\r\nimport axios from \"axios\";\r\nexport const setSearchField=(text)=>({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\nexport const requestRobots=()=>{\r\n    return (dispatch)=>{\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n\r\n    axios.get(\r\n        'https://jsonplaceholder.typicode.com/users'\r\n    )\r\n    .then((data)=>{ console.log(data.data); dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data.data})})\r\n    .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\r\n}}","export const CHANGE_SEARCH_FIELD=\"CHANGE_SEARCH_FIELD\";\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILURE';\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS } from \"./constant\"\r\n \r\nconst intialSearchState={\r\n    searchField:''\r\n}\r\nexport const searchRobots=(state=intialSearchState, action={})=>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state,{searchField:action.payload});\r\n            //{...state,searchField:action.payload}\r\n            default:\r\n                return state;\r\n    }\r\n}\r\nconst inititalStateRobots={\r\n    isPending:false,\r\n    robots:[],\r\n    error:''\r\n}\r\nexport const requestRobots=(state=inititalStateRobots,action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending:true});\r\n    \r\n    case REQUEST_ROBOTS_SUCCESS:\r\n        return Object.assign({},state,{robots:action.payload,isPending:false});\r\n    case REQUEST_ROBOTS_FAILED:\r\n        return Object.assign({},state,{error:action.payload,isPending:false});\r\n    default:\r\n        return state;    \r\n}\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then((response) => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\nimport {Provider} from 'react-redux';\r\nimport {searchRobots,requestRobots} from './reducers';\r\nimport {legacy_createStore as createStore, applyMiddleware,combineReducers} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport {thunk as thunkMiddleware}  from 'redux-thunk';\r\n\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\n// const thunkMiddleware =\r\n//   ({ dispatch, getState }) =>\r\n//   next =>\r\n//   action => {\r\n//     // If the \"action\" is actually a function instead...\r\n//     if (typeof action === 'function') {\r\n//       // then call the function and pass `dispatch` and `getState` as arguments\r\n//       return action(dispatch, getState)\r\n//     }\r\n\r\n//     // Otherwise, it's a normal action - send it onwards\r\n//     return next(action)\r\n//   }\r\nconst rootReducer=combineReducers({searchRobots,requestRobots})\r\nconst Logger = createLogger();\r\nconst store=createStore(rootReducer,applyMiddleware(thunkMiddleware,Logger));\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n  </React.StrictMode>\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}